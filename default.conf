resolver local=on;
lua_package_path "/etc/openresty/lua/?.lua;/etc/nginx/conf.d/repos/lua-resty-http/lib/?.lua;;";

server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        # these blocks very rarely need to change
        content_by_lua_block {
            local http = require 'resty.http'
            local httpc = http.new()
            ngx.say("hi")
            ngx.flush(true)

            httpc:set_timeout(10000)
            local ok, err= httpc:connect({
                scheme = 'http',
                host = '127.0.0.1',
                port = '81',
            })

            if not ok then
                ngx.log(ngx.ERR, "connection failed: ", err)
                return
            end

            local res, err = httpc:request({
                path = '/file.file',
            })

            ngx.log(ngx.INFO, err)

            local reader = res.body_reader

            repeat
                local chunk, err = reader(2^16)

                if err then
                     ngx.log(ngx.ERR, "chunk failed: ", err)
                end

                if chunk then
                    ngx.print(chunk)
                    ngx.flush(true)
                end
            until not chunk
        }
        body_filter_by_lua_block { }
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }

}

server {
    listen       81;
    server_name  localhost;

    location / {
        alias /etc/nginx/conf.d/data/;
        # content_by_lua_block {
        #     function print_random(t, b)
        #         local alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
        #         local n = string.len(alphabet)
        #         local pw = {}
        #         local count = t / b
        #         for i = 1, count
        #         do
        #             local s = ''
        #             for i = 1, b
        #             do
        #                 s = s .. string.char(string.byte(alphabet, math.random(n)))
        #             end
        #             ngx.print(s)
        #             ngx.flush(true)
        #         end
        #     end
        #     print_random(10523895, 16)
        #     ngx.eof()
        # }
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }

}
